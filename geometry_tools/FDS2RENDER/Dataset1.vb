'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tableAppearances As AppearancesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Appearances")) Is Nothing) Then
                Me.Tables.Add(New AppearancesDataTable(ds.Tables("Appearances")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Appearances As AppearancesDataTable
        Get
            Return Me.tableAppearances
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Appearances")) Is Nothing) Then
            Me.Tables.Add(New AppearancesDataTable(ds.Tables("Appearances")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAppearances = CType(Me.Tables("Appearances"),AppearancesDataTable)
        If (Not (Me.tableAppearances) Is Nothing) Then
            Me.tableAppearances.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAppearances = New AppearancesDataTable
        Me.Tables.Add(Me.tableAppearances)
    End Sub
    
    Private Function ShouldSerializeAppearances() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AppearancesRowChangeEventHandler(ByVal sender As Object, ByVal e As AppearancesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppearancesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIndex As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnR As DataColumn
        
        Private columnG As DataColumn
        
        Private columnB As DataColumn
        
        Private columntwidth As DataColumn
        
        Private columntheight As DataColumn
        
        Private columnalpha As DataColumn
        
        Private columnshininess As DataColumn
        
        Private columntx0 As DataColumn
        
        Private columnty0 As DataColumn
        
        Private columntzo As DataColumn
        
        Private columntfile As DataColumn
        
        Private columnAppearanceIndex As DataColumn
        
        Friend Sub New()
            MyBase.New("Appearances")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IndexColumn As DataColumn
            Get
                Return Me.columnIndex
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property RColumn As DataColumn
            Get
                Return Me.columnR
            End Get
        End Property
        
        Friend ReadOnly Property GColumn As DataColumn
            Get
                Return Me.columnG
            End Get
        End Property
        
        Friend ReadOnly Property BColumn As DataColumn
            Get
                Return Me.columnB
            End Get
        End Property
        
        Friend ReadOnly Property twidthColumn As DataColumn
            Get
                Return Me.columntwidth
            End Get
        End Property
        
        Friend ReadOnly Property theightColumn As DataColumn
            Get
                Return Me.columntheight
            End Get
        End Property
        
        Friend ReadOnly Property alphaColumn As DataColumn
            Get
                Return Me.columnalpha
            End Get
        End Property
        
        Friend ReadOnly Property shininessColumn As DataColumn
            Get
                Return Me.columnshininess
            End Get
        End Property
        
        Friend ReadOnly Property tx0Column As DataColumn
            Get
                Return Me.columntx0
            End Get
        End Property
        
        Friend ReadOnly Property ty0Column As DataColumn
            Get
                Return Me.columnty0
            End Get
        End Property
        
        Friend ReadOnly Property tzoColumn As DataColumn
            Get
                Return Me.columntzo
            End Get
        End Property
        
        Friend ReadOnly Property tfileColumn As DataColumn
            Get
                Return Me.columntfile
            End Get
        End Property
        
        Friend ReadOnly Property AppearanceIndexColumn As DataColumn
            Get
                Return Me.columnAppearanceIndex
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AppearancesRow
            Get
                Return CType(Me.Rows(index),AppearancesRow)
            End Get
        End Property
        
        Public Event AppearancesRowChanged As AppearancesRowChangeEventHandler
        
        Public Event AppearancesRowChanging As AppearancesRowChangeEventHandler
        
        Public Event AppearancesRowDeleted As AppearancesRowChangeEventHandler
        
        Public Event AppearancesRowDeleting As AppearancesRowChangeEventHandler
        
        Public Overloads Sub AddAppearancesRow(ByVal row As AppearancesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAppearancesRow(ByVal Description As String, ByVal R As Long, ByVal G As Long, ByVal B As Long, ByVal twidth As Single, ByVal theight As Single, ByVal alpha As Single, ByVal shininess As Single, ByVal tx0 As Single, ByVal ty0 As Single, ByVal tzo As Single, ByVal tfile As String, ByVal AppearanceIndex As Long) As AppearancesRow
            Dim rowAppearancesRow As AppearancesRow = CType(Me.NewRow,AppearancesRow)
            rowAppearancesRow.ItemArray = New Object() {Nothing, Description, R, G, B, twidth, theight, alpha, shininess, tx0, ty0, tzo, tfile, AppearanceIndex}
            Me.Rows.Add(rowAppearancesRow)
            Return rowAppearancesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AppearancesDataTable = CType(MyBase.Clone,AppearancesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AppearancesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIndex = Me.Columns("Index")
            Me.columnDescription = Me.Columns("Description")
            Me.columnR = Me.Columns("R")
            Me.columnG = Me.Columns("G")
            Me.columnB = Me.Columns("B")
            Me.columntwidth = Me.Columns("twidth")
            Me.columntheight = Me.Columns("theight")
            Me.columnalpha = Me.Columns("alpha")
            Me.columnshininess = Me.Columns("shininess")
            Me.columntx0 = Me.Columns("tx0")
            Me.columnty0 = Me.Columns("ty0")
            Me.columntzo = Me.Columns("tzo")
            Me.columntfile = Me.Columns("tfile")
            Me.columnAppearanceIndex = Me.Columns("AppearanceIndex")
        End Sub
        
        Private Sub InitClass()
            Me.columnIndex = New DataColumn("Index", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndex)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnR = New DataColumn("R", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnR)
            Me.columnG = New DataColumn("G", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnG)
            Me.columnB = New DataColumn("B", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB)
            Me.columntwidth = New DataColumn("twidth", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntwidth)
            Me.columntheight = New DataColumn("theight", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntheight)
            Me.columnalpha = New DataColumn("alpha", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnalpha)
            Me.columnshininess = New DataColumn("shininess", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnshininess)
            Me.columntx0 = New DataColumn("tx0", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntx0)
            Me.columnty0 = New DataColumn("ty0", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnty0)
            Me.columntzo = New DataColumn("tzo", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntzo)
            Me.columntfile = New DataColumn("tfile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntfile)
            Me.columnAppearanceIndex = New DataColumn("AppearanceIndex", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppearanceIndex)
            Me.columnIndex.AutoIncrement = true
        End Sub
        
        Public Function NewAppearancesRow() As AppearancesRow
            Return CType(Me.NewRow,AppearancesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AppearancesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AppearancesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AppearancesRowChangedEvent) Is Nothing) Then
                RaiseEvent AppearancesRowChanged(Me, New AppearancesRowChangeEvent(CType(e.Row,AppearancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AppearancesRowChangingEvent) Is Nothing) Then
                RaiseEvent AppearancesRowChanging(Me, New AppearancesRowChangeEvent(CType(e.Row,AppearancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AppearancesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AppearancesRowDeleted(Me, New AppearancesRowChangeEvent(CType(e.Row,AppearancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AppearancesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AppearancesRowDeleting(Me, New AppearancesRowChangeEvent(CType(e.Row,AppearancesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAppearancesRow(ByVal row As AppearancesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppearancesRow
        Inherits DataRow
        
        Private tableAppearances As AppearancesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAppearances = CType(Me.Table,AppearancesDataTable)
        End Sub
        
        Public Property Index As Long
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.IndexColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.IndexColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property R As Long
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.RColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.RColumn) = value
            End Set
        End Property
        
        Public Property G As Long
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.GColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.GColumn) = value
            End Set
        End Property
        
        Public Property B As Long
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.BColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.BColumn) = value
            End Set
        End Property
        
        Public Property twidth As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.twidthColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.twidthColumn) = value
            End Set
        End Property
        
        Public Property theight As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.theightColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.theightColumn) = value
            End Set
        End Property
        
        Public Property alpha As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.alphaColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.alphaColumn) = value
            End Set
        End Property
        
        Public Property shininess As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.shininessColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.shininessColumn) = value
            End Set
        End Property
        
        Public Property tx0 As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.tx0Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.tx0Column) = value
            End Set
        End Property
        
        Public Property ty0 As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.ty0Column),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.ty0Column) = value
            End Set
        End Property
        
        Public Property tzo As Single
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.tzoColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.tzoColumn) = value
            End Set
        End Property
        
        Public Property tfile As String
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.tfileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.tfileColumn) = value
            End Set
        End Property
        
        Public Property AppearanceIndex As Long
            Get
                Try 
                    Return CType(Me(Me.tableAppearances.AppearanceIndexColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppearances.AppearanceIndexColumn) = value
            End Set
        End Property
        
        Public Function IsIndexNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.IndexColumn)
        End Function
        
        Public Sub SetIndexNull()
            Me(Me.tableAppearances.IndexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableAppearances.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.RColumn)
        End Function
        
        Public Sub SetRNull()
            Me(Me.tableAppearances.RColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.GColumn)
        End Function
        
        Public Sub SetGNull()
            Me(Me.tableAppearances.GColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.BColumn)
        End Function
        
        Public Sub SetBNull()
            Me(Me.tableAppearances.BColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstwidthNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.twidthColumn)
        End Function
        
        Public Sub SettwidthNull()
            Me(Me.tableAppearances.twidthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstheightNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.theightColumn)
        End Function
        
        Public Sub SettheightNull()
            Me(Me.tableAppearances.theightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsalphaNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.alphaColumn)
        End Function
        
        Public Sub SetalphaNull()
            Me(Me.tableAppearances.alphaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsshininessNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.shininessColumn)
        End Function
        
        Public Sub SetshininessNull()
            Me(Me.tableAppearances.shininessColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istx0Null() As Boolean
            Return Me.IsNull(Me.tableAppearances.tx0Column)
        End Function
        
        Public Sub Settx0Null()
            Me(Me.tableAppearances.tx0Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isty0Null() As Boolean
            Return Me.IsNull(Me.tableAppearances.ty0Column)
        End Function
        
        Public Sub Setty0Null()
            Me(Me.tableAppearances.ty0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IstzoNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.tzoColumn)
        End Function
        
        Public Sub SettzoNull()
            Me(Me.tableAppearances.tzoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstfileNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.tfileColumn)
        End Function
        
        Public Sub SettfileNull()
            Me(Me.tableAppearances.tfileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppearanceIndexNull() As Boolean
            Return Me.IsNull(Me.tableAppearances.AppearanceIndexColumn)
        End Function
        
        Public Sub SetAppearanceIndexNull()
            Me(Me.tableAppearances.AppearanceIndexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppearancesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AppearancesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AppearancesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AppearancesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
